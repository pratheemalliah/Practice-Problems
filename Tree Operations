class Node {
  constructor(val) {
    this.value = val;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }
  
  
  insert(val) {
    let newNode = new Node(val);
    let current = this.root;
    if(current === null) {
      this.root = newNode;
      return this;
    } else {
      while(true) {
       if(current.value>val) {
        if(current.left === null) {
          current.left = newNode;
          return this;
        } else {
          current = current.left;
        }
        
      } else if(current.value<val) {  
        if(current.right === null) {
          current.right = newNode;
          return this;
        } else {
          current = current.right;
        }
      } else {
        return undefined;
      }
      }//while
    }//else
      
  }//insert
  
  find(val) {
    let current = this.root;
    if(current === null) {
      return false;
    } else {
      while(true) {
       if(current.value>val) {
        if(current.left === null) {
          return false;
        } else {
          current = current.left;
        }
        
      } else if(current.value<val) {  
        if(current.right === null) {
          return false;
        } else {
          current = current.right;
        }
      } else {
        return true;
      }
      }//while
    }//else
  }
  
  bfs() {
    let node = this.root,data = [], q = [];
    q.push(node);
    while(q.length) {
      node = q.shift();
      data.push(node.value);
      if(node.left) q.push(node.left);
      if(node.right) q.push(node.right);
    }
    return data;
  }
  

   dfsPre() {
    let data = [];
    function traverse (node) {
      data.push(node.value);
      if(node.left) {
        traverse(node.left);
      } 
      if(node.right) {
        traverse(node.right)
      } 
    }
    traverse(this.root);
    return data; 
  } 
  
  
  dfsIn() {
    let data = [];
    function traverse (node) {
      if(node.left) {
        traverse(node.left);
      } 
      data.push(node.value);
      if(node.right) {
        traverse(node.right)
      } 
    }
    traverse(this.root);
    return data; 
    
  }
  
  dfsPost() {
    let data = [];
    function traverse (node) {
      if(node.left) {
        traverse(node.left);
      } 
      
      if(node.right) {
        traverse(node.right)
      } 
      data.push(node.value);
    }
    traverse(this.root);
    return data; 
  }
  
  
}//class
  
  
let bst = new BinarySearchTree();
bst.insert(6);
bst.insert(2);
bst.insert(12);
bst.insert(3);
bst.insert(16);
bst.insert(22);
bst.insert(11);
bst.insert(30);
bst.insert(10);
console.log(bst);
console.log("find----"+bst.find(20))
console.log(bst.bfs());
console.log(bst.dfsPre())
console.log(bst.dfsIn())
console.log(bst.dfsPost())





















